{"ast":null,"code":"var _jsxFileName = \"/Users/ilja_prihach/Desktop/React-TS/Sprint_3/Counter_Redux/src/Counter.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"./Button\";\n// import {ProgressBar} from \"./ProgressBar\";\n// import {Count}  from \"./Count\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Counter = ({\n  maxValue,\n  startValue,\n  errorMessage,\n  maxValueInputActive,\n  startValuesInputActive,\n  counterHasChanged\n}) => {\n  _s();\n  const [count, setCount] = useState(startValue);\n  useEffect(() => {\n    setCount(startValue);\n  }, [startValue]);\n  const inc = () => {\n    if (count < maxValue) {\n      setCount(count + 1);\n      counterHasChanged();\n    }\n  };\n  const reset = () => {\n    setCount(startValue);\n  };\n  const isMaxValueReached = count === maxValue;\n  const conditionsIncDisabled = maxValueInputActive || startValuesInputActive || count >= maxValue;\n  const conditionsResetDisabled = maxValueInputActive || startValuesInputActive || count === startValue;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper_set\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper_setValue\",\n      children: errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this) : startValuesInputActive || maxValueInputActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Enter values and press 'set'\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this) : isMaxValueReached ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"Maximum value reached!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"count\",\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper_button\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        title: \" inc \",\n        onClick: inc,\n        disabled: conditionsIncDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        title: \" reset \",\n        onClick: reset,\n        disabled: conditionsResetDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(Counter, \"VickzUowwgDHMUhLDtdgTjenXD0=\");\n_c = Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["useEffect","useState","Button","jsxDEV","_jsxDEV","Counter","maxValue","startValue","errorMessage","maxValueInputActive","startValuesInputActive","counterHasChanged","_s","count","setCount","inc","reset","isMaxValueReached","conditionsIncDisabled","conditionsResetDisabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","title","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ilja_prihach/Desktop/React-TS/Sprint_3/Counter_Redux/src/Counter.tsx"],"sourcesContent":["import {useEffect, useState} from \"react\";\nimport {Button} from \"./Button\";\n// import {ProgressBar} from \"./ProgressBar\";\n// import {Count}  from \"./Count\";\n\ntype Props = {\n    maxValue: number;\n    startValue: number;\n    errorMessage:  string;\n    maxValueInputActive: boolean;\n    startValuesInputActive:  boolean;\n    counterHasChanged: () => void;\n}\n\nexport const Counter = ({\n    maxValue,\n    startValue,\n    errorMessage,\n    maxValueInputActive,\n    startValuesInputActive,\n    counterHasChanged\n} : Props) => {\n\n\n    const [count, setCount] = useState(startValue);\n\n    useEffect(() => {\n        setCount(startValue);\n    }, [startValue]);\n\n\n    const inc = () => {\n        if (count < maxValue) {\n            setCount(count + 1)\n            counterHasChanged()\n        }\n    };\n\n    const reset = () => {\n            setCount(startValue);\n    };\n\n    const isMaxValueReached =  count === maxValue;\n\n    const conditionsIncDisabled = maxValueInputActive || startValuesInputActive || count >= maxValue\n    const conditionsResetDisabled =   maxValueInputActive || startValuesInputActive || count === startValue\n    return (\n        <div className=\"wrapper_set\">\n            <div className=\"wrapper_setValue\">\n                {errorMessage ? (\n                    <div className=\"error\">\n                        {errorMessage}\n                    </div>\n                ) : startValuesInputActive || maxValueInputActive ? (\n                    <div>Enter values and press 'set'</div>\n                ) : isMaxValueReached ? (\n                    <p style={{color: \"red\"}}>Maximum value reached!</p>\n                ) : (\n                    <div className=\"count\">{count}</div>\n                )}\n            </div>\n\n            <div className=\"wrapper_button\">\n                <Button title={\" inc \"} onClick={inc} disabled={conditionsIncDisabled}/>\n                <Button title={\" reset \"} onClick={reset} disabled={conditionsResetDisabled}/>\n            </div>\n        </div>\n    );\n};\n"],"mappings":";;AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,SAAQC,MAAM,QAAO,UAAU;AAC/B;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAWA,OAAO,MAAMC,OAAO,GAAGA,CAAC;EACpBC,QAAQ;EACRC,UAAU;EACVC,YAAY;EACZC,mBAAmB;EACnBC,sBAAsB;EACtBC;AACI,CAAC,KAAK;EAAAC,EAAA;EAGV,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACM,UAAU,CAAC;EAE9CP,SAAS,CAAC,MAAM;IACZc,QAAQ,CAACP,UAAU,CAAC;EACxB,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAGhB,MAAMQ,GAAG,GAAGA,CAAA,KAAM;IACd,IAAIF,KAAK,GAAGP,QAAQ,EAAE;MAClBQ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACnBF,iBAAiB,CAAC,CAAC;IACvB;EACJ,CAAC;EAED,MAAMK,KAAK,GAAGA,CAAA,KAAM;IACZF,QAAQ,CAACP,UAAU,CAAC;EAC5B,CAAC;EAED,MAAMU,iBAAiB,GAAIJ,KAAK,KAAKP,QAAQ;EAE7C,MAAMY,qBAAqB,GAAGT,mBAAmB,IAAIC,sBAAsB,IAAIG,KAAK,IAAIP,QAAQ;EAChG,MAAMa,uBAAuB,GAAKV,mBAAmB,IAAIC,sBAAsB,IAAIG,KAAK,KAAKN,UAAU;EACvG,oBACIH,OAAA;IAAKgB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxBjB,OAAA;MAAKgB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC5Bb,YAAY,gBACTJ,OAAA;QAAKgB,SAAS,EAAC,OAAO;QAAAC,QAAA,EACjBb;MAAY;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,GACNf,sBAAsB,IAAID,mBAAmB,gBAC7CL,OAAA;QAAAiB,QAAA,EAAK;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GACvCR,iBAAiB,gBACjBb,OAAA;QAAGsB,KAAK,EAAE;UAACC,KAAK,EAAE;QAAK,CAAE;QAAAN,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAEpDrB,OAAA;QAAKgB,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAER;MAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IACtC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAENrB,OAAA;MAAKgB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC3BjB,OAAA,CAACF,MAAM;QAAC0B,KAAK,EAAE,OAAQ;QAACC,OAAO,EAAEd,GAAI;QAACe,QAAQ,EAAEZ;MAAsB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACxErB,OAAA,CAACF,MAAM;QAAC0B,KAAK,EAAE,SAAU;QAACC,OAAO,EAAEb,KAAM;QAACc,QAAQ,EAAEX;MAAwB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACb,EAAA,CAtDWP,OAAO;AAAA0B,EAAA,GAAP1B,OAAO;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}