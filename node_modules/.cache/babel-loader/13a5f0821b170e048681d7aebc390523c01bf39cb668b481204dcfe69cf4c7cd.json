{"ast":null,"code":"var _jsxFileName = \"/Users/ilja_prihach/Desktop/React-TS/Sprint_3/Counter_Redux/src/common/components/Counter.tsx\",\n  _s = $RefreshSig$();\nimport { Button } from \"./Button\";\nimport { useAppDispatch } from \"../hooks/useAppDispatch\";\nimport { useAppSelector } from \"../hooks/useAppSelector\";\nimport { increment, resetCount, setCounterChanged } from \"../../features/model/counter-reducer\";\n// import {ProgressBar} from \"./ProgressBar\";\n// import {Count}  from \"./Count\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Counter = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    count,\n    maxValue,\n    startValue,\n    errorMessage,\n    inputActive\n  } = useAppSelector(state => state.counter);\n  const inc = () => {\n    if (count < maxValue) {\n      dispatch(increment());\n      dispatch(setCounterChanged(true));\n    }\n  };\n  const reset = () => {\n    dispatch(resetCount());\n  };\n  const isMaxValueReached = count === maxValue;\n  const conditionsIncDisabled = inputActive || count >= maxValue;\n  const conditionsResetDisabled = inputActive || count === startValue;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper_set\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper_setValue\",\n      children: errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this) : inputActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Enter values and press 'set'\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this) : isMaxValueReached ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"Maximum value reached!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"count\",\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper_button\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        title: \" inc \",\n        onClick: inc,\n        disabled: conditionsIncDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        title: \" reset \",\n        onClick: reset,\n        disabled: conditionsResetDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(Counter, \"07uGPQXaQApnHnvVV3qjRUwYfrY=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["Button","useAppDispatch","useAppSelector","increment","resetCount","setCounterChanged","jsxDEV","_jsxDEV","Counter","_s","dispatch","count","maxValue","startValue","errorMessage","inputActive","state","counter","inc","reset","isMaxValueReached","conditionsIncDisabled","conditionsResetDisabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","title","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ilja_prihach/Desktop/React-TS/Sprint_3/Counter_Redux/src/common/components/Counter.tsx"],"sourcesContent":["import {useEffect, useState} from \"react\";\nimport {Button} from \"./Button\";\nimport {useAppDispatch} from \"../hooks/useAppDispatch\";\nimport {useAppSelector} from \"../hooks/useAppSelector\";\nimport {increment, resetCount, setCounterChanged} from \"../../features/model/counter-reducer\";\n// import {ProgressBar} from \"./ProgressBar\";\n// import {Count}  from \"./Count\";\n\n\n\nexport const Counter = () => {\n    const dispatch = useAppDispatch();\n    const {\n        count,\n        maxValue,\n        startValue,\n        errorMessage,\n        inputActive\n    } = useAppSelector((state) => state.counter);\n\n\n\n    const inc = () => {\n        if (count < maxValue) {\n            dispatch(increment());\n            dispatch(setCounterChanged(true))\n        }\n    };\n\n    const reset = () => {\n            dispatch(resetCount())\n    };\n\n    const isMaxValueReached =  count === maxValue;\n\n    const conditionsIncDisabled = inputActive || count >= maxValue\n    const conditionsResetDisabled =  inputActive || count === startValue\n    return (\n        <div className=\"wrapper_set\">\n            <div className=\"wrapper_setValue\">\n                {errorMessage ? (\n                    <div className=\"error\">\n                        {errorMessage}\n                    </div>\n                ) : inputActive ? (\n                    <div>Enter values and press 'set'</div>\n                ) : isMaxValueReached ? (\n                    <p style={{color: \"red\"}}>Maximum value reached!</p>\n                ) : (\n                    <div className=\"count\">{count}</div>\n                )}\n            </div>\n\n            <div className=\"wrapper_button\">\n                <Button\n                    title={\" inc \"}\n                    onClick={inc}\n                    disabled={conditionsIncDisabled}\n                />\n                <Button\n                    title={\" reset \"}\n                    onClick={reset}\n                    disabled={conditionsResetDisabled}\n                />\n            </div>\n        </div>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}