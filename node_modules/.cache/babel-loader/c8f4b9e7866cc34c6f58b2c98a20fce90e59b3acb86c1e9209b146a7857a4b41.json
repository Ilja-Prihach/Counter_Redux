{"ast":null,"code":"import { createAction, createReducer } from \"@reduxjs/toolkit\";\nlet initialStartValueCounter = 0;\nlet initialMaxValueCounter = 5;\nconst initialState = {\n  startValue: initialStartValueCounter,\n  maxValue: initialMaxValueCounter,\n  count: initialStartValueCounter,\n  errorMessage: \"\",\n  inputActive: false,\n  counterChanged: false\n};\nexport const increment = createAction('counter/increment');\nexport const resetCount = createAction('counter/reset');\nexport const setStartValue = createAction('counter/setStartValue');\nexport const setMaxValue = createAction('counter/setMaxValue');\nexport const setErrorMessage = createAction('counter/setErrorMessage');\nexport const setInputActive = createAction('counter/setInputActive');\nexport const setCounterChanged = createAction('counter/setCounterChanged');\nexport const setCount = createAction('counter/setCount');\nexport const counterReducer = createReducer(initialState, builder => {\n  builder.addCase(increment, state => {\n    state.count += 1;\n  }).addCase(resetCount, state => {\n    state.count = state.startValue;\n  }).addCase(setCount, (state, action) => {\n    state.count = action.payload;\n  }).addCase(setStartValue, (state, action) => {\n    state.startValue = action.payload;\n  }).addCase(setMaxValue, (state, action) => {\n    state.maxValue = action.payload;\n  }).addCase(setErrorMessage, (state, action) => {\n    state.errorMessage = action.payload;\n  }).addCase(setInputActive, (state, action) => {\n    state.inputActive = action.payload;\n  }).addCase(setCounterChanged, (state, action) => {\n    state.counterChanged = action.payload;\n  });\n});","map":{"version":3,"names":["createAction","createReducer","initialStartValueCounter","initialMaxValueCounter","initialState","startValue","maxValue","count","errorMessage","inputActive","counterChanged","increment","resetCount","setStartValue","setMaxValue","setErrorMessage","setInputActive","setCounterChanged","setCount","counterReducer","builder","addCase","state","action","payload"],"sources":["/Users/ilja_prihach/Desktop/React-TS/Sprint_3/Counter_Redux/src/features/model/counter-reducer.ts"],"sourcesContent":["import {createAction, createReducer, PayloadAction} from \"@reduxjs/toolkit\";\n\n\ntype CounterState = {\n    startValue: number\n    maxValue: number\n    count: number\n    errorMessage: string\n    inputActive: boolean\n    counterChanged: boolean\n}\n\nlet initialStartValueCounter = 0\nlet initialMaxValueCounter = 5\n\nconst initialState: CounterState = {\n    startValue: initialStartValueCounter,\n    maxValue: initialMaxValueCounter,\n    count: initialStartValueCounter,\n    errorMessage: \"\",\n    inputActive: false,\n    counterChanged: false,\n}\n\nexport const increment = createAction('counter/increment')\nexport const resetCount = createAction('counter/reset');\nexport const setStartValue = createAction<number>('counter/setStartValue');\nexport const setMaxValue = createAction<number>('counter/setMaxValue');\nexport const setErrorMessage = createAction<string>('counter/setErrorMessage');\nexport const setInputActive = createAction<boolean>('counter/setInputActive');\nexport const setCounterChanged = createAction<boolean>('counter/setCounterChanged');\nexport const setCount =  createAction<number>('counter/setCount');\n\nexport const counterReducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(increment, (state) => {\n            state.count += 1;\n        })\n        .addCase(resetCount, (state) => {\n            state.count = state.startValue\n        })\n        .addCase(setCount, (state, action: PayloadAction<number>) => {\n            state.count = action.payload;\n        })\n        .addCase(setStartValue, (state, action: PayloadAction<number>) => {\n            state.startValue = action.payload\n        })\n        .addCase(setMaxValue, (state, action: PayloadAction<number>) => {\n            state.maxValue = action.payload\n        })\n        .addCase(setErrorMessage, (state, action: PayloadAction<string>) => {\n            state.errorMessage = action.payload\n        })\n        .addCase(setInputActive, (state, action: PayloadAction<boolean>) => {\n            state.inputActive = action.payload\n        })\n        .addCase(setCounterChanged, (state, action: PayloadAction<boolean>) => {\n            state.counterChanged = action.payload\n        })\n});"],"mappings":"AAAA,SAAQA,YAAY,EAAEC,aAAa,QAAsB,kBAAkB;AAY3E,IAAIC,wBAAwB,GAAG,CAAC;AAChC,IAAIC,sBAAsB,GAAG,CAAC;AAE9B,MAAMC,YAA0B,GAAG;EAC/BC,UAAU,EAAEH,wBAAwB;EACpCI,QAAQ,EAAEH,sBAAsB;EAChCI,KAAK,EAAEL,wBAAwB;EAC/BM,YAAY,EAAE,EAAE;EAChBC,WAAW,EAAE,KAAK;EAClBC,cAAc,EAAE;AACpB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGX,YAAY,CAAC,mBAAmB,CAAC;AAC1D,OAAO,MAAMY,UAAU,GAAGZ,YAAY,CAAC,eAAe,CAAC;AACvD,OAAO,MAAMa,aAAa,GAAGb,YAAY,CAAS,uBAAuB,CAAC;AAC1E,OAAO,MAAMc,WAAW,GAAGd,YAAY,CAAS,qBAAqB,CAAC;AACtE,OAAO,MAAMe,eAAe,GAAGf,YAAY,CAAS,yBAAyB,CAAC;AAC9E,OAAO,MAAMgB,cAAc,GAAGhB,YAAY,CAAU,wBAAwB,CAAC;AAC7E,OAAO,MAAMiB,iBAAiB,GAAGjB,YAAY,CAAU,2BAA2B,CAAC;AACnF,OAAO,MAAMkB,QAAQ,GAAIlB,YAAY,CAAS,kBAAkB,CAAC;AAEjE,OAAO,MAAMmB,cAAc,GAAGlB,aAAa,CAACG,YAAY,EAAGgB,OAAO,IAAK;EACnEA,OAAO,CACFC,OAAO,CAACV,SAAS,EAAGW,KAAK,IAAK;IAC3BA,KAAK,CAACf,KAAK,IAAI,CAAC;EACpB,CAAC,CAAC,CACDc,OAAO,CAACT,UAAU,EAAGU,KAAK,IAAK;IAC5BA,KAAK,CAACf,KAAK,GAAGe,KAAK,CAACjB,UAAU;EAClC,CAAC,CAAC,CACDgB,OAAO,CAACH,QAAQ,EAAE,CAACI,KAAK,EAAEC,MAA6B,KAAK;IACzDD,KAAK,CAACf,KAAK,GAAGgB,MAAM,CAACC,OAAO;EAChC,CAAC,CAAC,CACDH,OAAO,CAACR,aAAa,EAAE,CAACS,KAAK,EAAEC,MAA6B,KAAK;IAC9DD,KAAK,CAACjB,UAAU,GAAGkB,MAAM,CAACC,OAAO;EACrC,CAAC,CAAC,CACDH,OAAO,CAACP,WAAW,EAAE,CAACQ,KAAK,EAAEC,MAA6B,KAAK;IAC5DD,KAAK,CAAChB,QAAQ,GAAGiB,MAAM,CAACC,OAAO;EACnC,CAAC,CAAC,CACDH,OAAO,CAACN,eAAe,EAAE,CAACO,KAAK,EAAEC,MAA6B,KAAK;IAChED,KAAK,CAACd,YAAY,GAAGe,MAAM,CAACC,OAAO;EACvC,CAAC,CAAC,CACDH,OAAO,CAACL,cAAc,EAAE,CAACM,KAAK,EAAEC,MAA8B,KAAK;IAChED,KAAK,CAACb,WAAW,GAAGc,MAAM,CAACC,OAAO;EACtC,CAAC,CAAC,CACDH,OAAO,CAACJ,iBAAiB,EAAE,CAACK,KAAK,EAAEC,MAA8B,KAAK;IACnED,KAAK,CAACZ,cAAc,GAAGa,MAAM,CAACC,OAAO;EACzC,CAAC,CAAC;AACV,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}