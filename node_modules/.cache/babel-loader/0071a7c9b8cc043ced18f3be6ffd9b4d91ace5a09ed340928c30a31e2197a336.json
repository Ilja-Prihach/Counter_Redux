{"ast":null,"code":"var _jsxFileName = \"/Users/ilja_prihach/Desktop/React-TS/Sprint_3/Counter_Redux/src/common/components/Set.tsx\",\n  _s = $RefreshSig$();\nimport { Button } from \"./Button\";\nimport { useEffect } from \"react\";\nimport { useAppDispatch } from \"../hooks/useAppDispatch\";\nimport { useAppSelector } from \"../hooks/useAppSelector\";\nimport { setCount, setCounterChanged, setErrorMessage, setInputActive, setMaxValue, setStartValue } from \"../../features/model/counter-reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Set = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  // каждый раз длставать по ожной штуке\n  const {\n    maxValue,\n    startValue,\n    errorMessage,\n    counterChanged\n  } = useAppSelector(state => state.counter);\n  useEffect(() => {\n    if (startValue >= maxValue || startValue < 0) {\n      dispatch(setErrorMessage(\"Incorrect value\"));\n    } else {\n      dispatch(setErrorMessage(\"\"));\n    }\n  }, [maxValue, startValue, dispatch]);\n\n  // useEffect(() => {\n  //     const savedMaxValue = localStorage.getItem(\"saveMaxValue\");\n  //     const savedStartValue = localStorage.getItem(\"saveStartValue\");\n  //\n  //     if (savedMaxValue) {\n  //         dispatch(setMaxValue(JSON.parse(savedMaxValue)));\n  //     }\n  //     if (savedStartValue) {\n  //         const parsedStartValue = JSON.parse(savedStartValue);\n  //         dispatch(setStartValue(parsedStartValue));\n  //         dispatch(setCount(parsedStartValue));\n  //     }\n  // }, [dispatch]);\n\n  const handleStartValueChange = value => {\n    console.log(value);\n    dispatch(setStartValue(value));\n    dispatch(setInputActive(true));\n    dispatch(setCounterChanged(false));\n  };\n  const handleMaxValueChange = value => {\n    let cleanedString = value;\n\n    // Убираем ведущие нули из строки (кроме случая \"0\")\n    if (value.length > 1 && value.startsWith('0')) {\n      cleanedString = value.replace(/^0+/, '');\n    }\n    const numericValue = Number(cleanedString);\n    dispatch(setMaxValue(numericValue));\n    // dispatch(setMaxValue(value));\n    dispatch(setInputActive(true));\n    dispatch(setCounterChanged(false));\n  };\n  const handleSave = () => {\n    localStorage.setItem(\"saveMaxValue\", JSON.stringify(maxValue));\n    localStorage.setItem(\"saveStartValue\", JSON.stringify(startValue));\n    dispatch(setInputActive(false));\n    dispatch(setCount(startValue));\n    dispatch(setCounterChanged(false));\n  };\n  const conditionsSetDisable = maxValue <= startValue || startValue < 0 || counterChanged || errorMessage !== \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper_set\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper_setValue\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"max value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: maxValue,\n          onFocus: () => dispatch(setInputActive(true)),\n          onChange: e => handleMaxValueChange(e.target.valueAsNumber)\n          // onBlur={(e) => {\n          //     const cleanedValue = Number(e.target.value);\n          //     dispatch(setMaxValue(cleanedValue));\n          // }}\n          ,\n          style: {\n            borderColor: errorMessage ? \"red\" : \"#ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"start value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: startValue,\n          onFocus: () => dispatch(setInputActive(true)),\n          onChange: e => handleStartValueChange(Number(e.target.value)),\n          style: {\n            borderColor: errorMessage ? \"red\" : \"#ccc\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper_button\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        title: \"set\",\n        onClick: handleSave,\n        disabled: conditionsSetDisable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(Set, \"iqrorYIWvJdXObnrarIjL+eUnyw=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = Set;\nvar _c;\n$RefreshReg$(_c, \"Set\");","map":{"version":3,"names":["Button","useEffect","useAppDispatch","useAppSelector","setCount","setCounterChanged","setErrorMessage","setInputActive","setMaxValue","setStartValue","jsxDEV","_jsxDEV","Set","_s","dispatch","maxValue","startValue","errorMessage","counterChanged","state","counter","handleStartValueChange","value","console","log","handleMaxValueChange","cleanedString","length","startsWith","replace","numericValue","Number","handleSave","localStorage","setItem","JSON","stringify","conditionsSetDisable","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onFocus","onChange","e","target","valueAsNumber","style","borderColor","title","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/ilja_prihach/Desktop/React-TS/Sprint_3/Counter_Redux/src/common/components/Set.tsx"],"sourcesContent":["import {Button} from \"./Button\";\nimport {useEffect, useState} from \"react\";\nimport {useAppDispatch} from \"../hooks/useAppDispatch\";\nimport {useAppSelector} from \"../hooks/useAppSelector\";\nimport {\n    setCount, setCounterChanged,\n    setErrorMessage,\n    setInputActive,\n    setMaxValue,\n    setStartValue\n} from \"../../features/model/counter-reducer\";\n\n\n\nexport const Set = () => {\n    const dispatch = useAppDispatch();\n    // каждый раз длставать по ожной штуке\n    const {\n        maxValue,\n        startValue,\n        errorMessage,\n        counterChanged\n    } = useAppSelector((state) => state.counter);\n\n    useEffect(() => {\n        if (startValue >= maxValue || startValue < 0) {\n            dispatch(setErrorMessage(\"Incorrect value\"));\n        } else {\n            dispatch(setErrorMessage(\"\"));\n        }\n    }, [maxValue, startValue, dispatch]);\n\n    // useEffect(() => {\n    //     const savedMaxValue = localStorage.getItem(\"saveMaxValue\");\n    //     const savedStartValue = localStorage.getItem(\"saveStartValue\");\n    //\n    //     if (savedMaxValue) {\n    //         dispatch(setMaxValue(JSON.parse(savedMaxValue)));\n    //     }\n    //     if (savedStartValue) {\n    //         const parsedStartValue = JSON.parse(savedStartValue);\n    //         dispatch(setStartValue(parsedStartValue));\n    //         dispatch(setCount(parsedStartValue));\n    //     }\n    // }, [dispatch]);\n\n\n\n\n\n    const handleStartValueChange = (value: number) => {\n        console.log(value);\n        dispatch(setStartValue(value));\n        dispatch(setInputActive(true));\n        dispatch(setCounterChanged(false));\n    };\n\n    const handleMaxValueChange = (value: number) => {\n        let cleanedString = value;\n\n        // Убираем ведущие нули из строки (кроме случая \"0\")\n        if (value.length > 1 && value.startsWith('0')) {\n            cleanedString = value.replace(/^0+/, '');\n        }\n\n        const numericValue = Number(cleanedString);\n        dispatch(setMaxValue(numericValue));\n        // dispatch(setMaxValue(value));\n        dispatch(setInputActive(true));\n        dispatch(setCounterChanged(false));\n    };\n\n    const handleSave = () => {\n        localStorage.setItem(\"saveMaxValue\", JSON.stringify(maxValue));\n        localStorage.setItem(\"saveStartValue\", JSON.stringify(startValue));\n\n\n        dispatch(setInputActive(false));\n        dispatch(setCount(startValue));\n        dispatch(setCounterChanged(false));\n    };\n\n    const conditionsSetDisable =\n        maxValue <= startValue ||\n        startValue < 0 ||\n        counterChanged ||\n        errorMessage !== \"\";\n\n    return (\n        <div className=\"wrapper_set\">\n            <div className=\"wrapper_setValue\">\n                <div>\n                    <span>max value</span>\n                    {/*вынести в компоненту инпут*/}\n                    <input\n                        type=\"number\"\n                        value={maxValue}\n                        onFocus = {() => dispatch(setInputActive(true))}\n                        onChange={(e) => handleMaxValueChange(e.target.valueAsNumber)}\n                        // onBlur={(e) => {\n                        //     const cleanedValue = Number(e.target.value);\n                        //     dispatch(setMaxValue(cleanedValue));\n                        // }}\n                        style={{\n                            borderColor: errorMessage ? \"red\" : \"#ccc\",\n                        }}\n                    />\n                </div>\n                <div>\n                    <span>start value</span>\n                    <input\n                        type=\"number\"\n                        value={startValue}\n                        onFocus = {() => dispatch(setInputActive(true))}\n                        onChange={(e) => handleStartValueChange(Number(e.target.value))}\n\n                        style={{\n                            borderColor: errorMessage ? \"red\" : \"#ccc\",\n                        }}\n                    />\n                </div>\n            </div>\n            <div className=\"wrapper_button\">\n                <Button\n                    title={\"set\"}\n                    onClick={handleSave}\n                    disabled={conditionsSetDisable}\n                />\n            </div>\n        </div>\n\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}